@import "src/style/themes/default";

/* Paper */
.joint-paper {
  background-color: @modeling-background-color;
}

/*  Links  */
.joint-type-custom-syntaxlink {
  path[joint-selector="line"] {
    stroke: @modeling-primary-color;
  }
}

.joint-type-custom-objectpropertylink {
  path[joint-selector="line"] {
    stroke: @modeling-object-property-color;
  }

  .label {
    rect {
      fill-opacity: 0;
    }

    text {
      fill: @modeling-primary-color;
    }
  }
}

.joint-type-custom-highlightedobjectpropertylink {
  path[joint-selector="line"] {
    stroke: @modeling-highlight-color;
    stroke-width: 4;
  }

  .label {
    rect {
      fill-opacity: 0;
    }

    text {
      fill: @modeling-primary-color;
    }
  }
}

.joint-type-custom-datapropertylink {
  path[joint-selector="line"] {
    stroke: @modeling-datatype-property-color;
  }

  .label {
    rect {
      fill-opacity: 0;
    }

    text {
      fill: @modeling-primary-color;
    }
  }
}

.joint-type-custom-highlighteddatapropertylink {
  path[joint-selector="line"] {
    stroke: @modeling-highlight-color;
    stroke-width: 4;
  }

  .label {
    rect {
      fill-opacity: 0;
    }

    text {
      fill: @modeling-primary-color;
    }
  }
}

.joint-type-custom-arraycontextlink {
  path[joint-selector="line"] {
    stroke: @modeling-arraycontext-color;
  }

  .label {
    rect {
      fill-opacity: 0;
    }
    text {
      fill: @modeling-arraycontext-color;
    }
  }
}

/* Nodes */
.joint-type-custom-syntaxnode {
  rect {
    stroke: @modeling-primary-color;
    fill:  @modeling-background-color;
  }

  text {
    fill: @modeling-primary-color;
  }
}

.joint-type-custom-semanticclassnode {
  rect {
    stroke: @modeling-class-color;
  }

  rect[joint-selector="body"] {
    fill: @modeling-class-color;
  }

  text[joint-selector="bodyText"] {
    fill: @modeling-text-color;
  }
}

.joint-type-custom-highlightedsemanticclassnode {
  rect {
    stroke: @modeling-highlight-color;
    stroke-width: 4;
  }

  rect[joint-selector="body"] {
    fill: @modeling-class-color;
  }

  text[joint-selector="bodyText"] {
    fill: @modeling-text-color;
  }
}


.joint-type-custom-extendedsemanticclassnode {
  rect {
    stroke: @modeling-class-color;
  }

  rect[joint-selector="body"] {
    fill: @modeling-background-color;
  }

  rect[joint-selector="header"] {
    fill: @modeling-class-color;
  }

  text[joint-selector="headerText"] {
    fill: @modeling-text-color;
  }

  text[joint-selector="bodyIcon"], text[joint-selector="bodyText"] {
    fill: @modeling-class-color;
  }
}

.joint-type-custom-highlightedextendedsemanticclassnode {
  rect {
    stroke: @modeling-highlight-color;
    stroke-width: 4;
  }

  rect[joint-selector="body"] {
    fill: @modeling-background-color;
  }

  rect[joint-selector="header"] {
    fill: @modeling-class-color;
  }

  text[joint-selector="headerText"] {
    fill: @modeling-text-color;
  }

  text[joint-selector="bodyIcon"], text[joint-selector="bodyText"] {
    fill: @modeling-class-color;
  }
}

.joint-type-custom-namedentitynode {
  rect {
    stroke: @modeling-named-entity-color;
  }

  rect[joint-selector="body"] {
    fill: @modeling-named-entity-color;
  }

  text[joint-selector="label"] {
    fill: @modeling-named-entity-text-color;
  }
}

.joint-type-custom-highlightednamedentitynode {
  rect {
    stroke: @modeling-highlight-color;
    stroke-width: 4;
  }

  rect[joint-selector="body"] {
    fill: @modeling-named-entity-color;
  }

  text[joint-selector="label"] {
    fill: @modeling-named-entity-text-color;
  }
}

.joint-type-custom-literalnode {
  rect {
    stroke: @modeling-literal-color;
  }

  rect[joint-selector="body"] {
    fill: @modeling-literal-color;
  }

  text[joint-selector="label"] {
    fill: @modeling-literal-text-color;
  }

  text[joint-selector="icon"] {
    fill: @modeling-literal-text-color;
  }
}

.joint-type-custom-highlightedliteralnode {
  rect {
    stroke: @modeling-highlight-color;
    stroke-width: 4;
  }

  rect[joint-selector="body"] {
    fill: @modeling-literal-color;
  }

  text[joint-selector="label"] {
    fill: @modeling-literal-text-color;
  }

  text[joint-selector="icon"]{
    fill: @modeling-literal-text-color;
  }
}

.joint-highlight-stroke {
  stroke: @modeling-highlight-color;
}


.semantic-node-input {

  .ant-input[disabled] {
    color: @text-color;
    cursor: auto;
  }

  .ant-form-item-label > label {
    color: @text-color-secondary !important;
  }

  .ant-form-item {
    margin-bottom: 0;
  }
}


