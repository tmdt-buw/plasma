# generated by datamodel-codegen:
#   filename:  http://localhost:8888/v3/api-docs/plasma-srs

from __future__ import annotations

from enum import Enum
from typing import List, Optional, Union

from pydantic import BaseModel, Field


class Edge(BaseModel):
    uuid: Optional[str] = None
    label: Optional[str] = None
    from_: Optional[str] = Field(None, alias='from')
    to: Optional[str] = None
    annotations: Optional[str] = None
    disabled: Optional[bool] = None
    visible: Optional[bool] = None


class Datatype(Enum):
    Unknown = 'Unknown'
    String = 'String'
    Boolean = 'Boolean'
    Number = 'Number'
    Binary = 'Binary'


class Relation(BaseModel):
    uuid: Optional[str] = None
    from_: Optional[str] = Field(None, alias='from')
    to: Optional[str] = None
    uri: Optional[str] = None
    label: Optional[str] = None
    description: Optional[str] = None
    properties: Optional[List[str]] = Field(None, unique_items=True)
    arraycontext: Optional[bool] = None
    provisional: Optional[bool] = None
    template: Optional[bool] = None
    field_class: str = Field(..., alias='_class')

    def __new__(cls, *args, **kwargs):
        if cls in subclass_registry.values():
            return super().__new__(cls)
        for name, subclass in subclass_registry.items():
            if '_class' in kwargs and name == kwargs['_class']:
                return subclass(**kwargs)
        return super().__new__(cls)


class SemanticModelNode(BaseModel):
    template: Optional[bool] = None
    mapped: Optional[bool] = None
    uuid: Optional[str] = None
    label: Optional[str] = None
    uri: Optional[str] = None
    provisional: Optional[bool] = None
    x: Optional[float] = None
    y: Optional[float] = None
    field_class: str = Field(..., alias='_class')

    def __new__(cls, *args, **kwargs):
        if cls in subclass_registry.values():
            return super().__new__(cls)
        for name, subclass in subclass_registry.items():
            if '_class' in kwargs and name == kwargs['_class']:
                return subclass(**kwargs)
        return super().__new__(cls)


class MappableSemanticModelNode(SemanticModelNode):
    syntaxNodeUuid: Optional[str] = None
    syntaxLabel: Optional[str] = None
    syntaxPath: Optional[str] = None


class Instance(BaseModel):
    description: Optional[str] = None
    uri: Optional[str] = None
    uuid: Optional[str] = None
    value: Optional[str] = None
    label: Optional[str] = None


class Class(MappableSemanticModelNode):
    description: Optional[str] = None
    instance: Optional[Instance] = None


class Literal(MappableSemanticModelNode):
    value: Optional[str] = None


class NamedEntity(SemanticModelNode):
    description: Optional[str] = None


class DataProperty(Relation):
    pass


class ObjectProperty(Relation):
    pass


class SemanticModel(BaseModel):
    id: Optional[str] = None
    nodes: Optional[List[SemanticModelNode]] = None
    edges: Optional[List[Union[DataProperty, ObjectProperty]]] = None


class SchemaNode(BaseModel):
    uuid: Optional[str] = None
    label: Optional[str] = None
    path: Optional[List[str]] = None
    x: Optional[float] = None
    y: Optional[float] = None
    visible: Optional[bool] = None
    disabled: Optional[bool] = None
    pathAsJSONPointer: Optional[str] = None
    field_class: str = Field(..., alias='_class')

    def __new__(cls, *args, **kwargs):
        if cls in subclass_registry.values():
            return super().__new__(cls)
        for name, subclass in subclass_registry.items():
            if '_class' in kwargs and name == kwargs['_class']:
                return subclass(**kwargs)
        return super().__new__(cls)


class ObjectNode(SchemaNode):
    pass


class PrimitiveNode(SchemaNode):
    datatype: Optional[Datatype] = None
    examples: Optional[List[str]] = None
    pattern: Optional[str] = None


class SetNode(SchemaNode):
    pass


class SyntaxModel(BaseModel):
    root: Optional[str] = None
    nodes: Optional[List[SchemaNode]] = None
    edges: Optional[List[Edge]] = None


class DeltaModification(BaseModel):
    reference: Optional[str] = None
    deletion: Optional[bool] = None
    entities: Optional[List[SemanticModelNode]] = None
    relations: Optional[List[Union[DataProperty, ObjectProperty]]] = None
    nodes: Optional[List[SchemaNode]] = None
    edges: Optional[List[Edge]] = None
    anchors: Optional[List[str]] = None
    confidence: Optional[float] = None


class CombinedModel(BaseModel):
    id: Optional[str] = None
    syntaxModel: Optional[SyntaxModel] = None
    semanticModel: Optional[SemanticModel] = None
    recommendations: Optional[List[DeltaModification]] = None
    lastModification: Optional[DeltaModification] = None
    finalized: Optional[bool] = None
    provisionalElements: Optional[List[SemanticModelNode]] = None
    provisionalRelations: Optional[List[Union[DataProperty, ObjectProperty]]] = None


subclass_registry = {'PrimitiveNode': PrimitiveNode,
                     'SetNode': SetNode,
                     'ObjectNode': ObjectNode,
                     'Class': Class,
                     'Literal': Literal,
                     'NamedEntity': NamedEntity,
                     'ObjectProperty': ObjectProperty,
                     'DataProperty': DataProperty}
